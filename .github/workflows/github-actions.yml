# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.

# Note, An action is a pre-defined, reusable set of jobs or code that perform specific tasks within a workflow

name: GitHub Actions Software Workspace
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ                                                    
                                                      # github.actor = Property Name
                                                      # The username of the user that triggered the initial workflow run
on:                                                   
  push:                                               # Workflow triggers are defined with the on key
    paths:                                            # This example runs anytime the push event includes a file in the PlantMUL_Architecture_Sequencing directory 
      - 'PlantMUL_Architecture_Sequencing'            # or its subdirectories, unless the file is in the PlantMUL_Architecture_Sequencing/Drafts directory.
      - '**.puml'                                     # marches zero or more of any character
    branches-ignore: 
      - main                                          #Ignore changes to main branch

jobs:                                                 # Jobs are contained in Workflows and Run a series of Steps
   PUML_Sequence_Image_Creation:                      # Name of Job
    runs-on: ubuntu-latest                            # Each job runs in a runner environment specified by runs-on
                                                      # ubuntu-latest specifies runner to execute on
    if: ${{ github.ref == 'refs/heads/main'}}       
                                                      # If the Branch is Main the Action Runs else it does not
    steps:                                            # Each step can either run a script that you define or run an action, which is a reusable extension that can simplify your workflow
                                                      # The echo command is used to display a line of text that is passed in as an argument
                                                      
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."                        
      # Describe trigger for jobs to run 
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"                          
      # Describe which server the job is now running on
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."   
      # Branch and Repo Name
      - name: Checkout Repository Code using Actions
        uses: actions/checkout@v4
      - name: Get changed UML files
        id: getfile
        run: |
          echo "name=files::$(git diff --name-only HEAD^ HEAD | grep .puml | xargs)" > $GITHUB_OUTPUT
      - name: Generate SVG Diagrams
        uses: holowinski/plantuml-github-action@main
        with:
          args: -v -tsvg ${{steps.getfile.outputs.files}}

      - name: Push Local Changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Generate SVG files for PlantUML diagrams"
          branch: ${{ github.head_ref }}
        # The location and version of a reusable workflow file to run as a job
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."