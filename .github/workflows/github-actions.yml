# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.

name: GitHub Actions Software Workspace
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: [push]
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."


#
# stages: # List of stages for jobs, and their order of execution
#   - build
#   - test
#   - deploy
#
# build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#     - echo "Compiling the code..."
#     - echo "Compile complete."
#
# build_png:
#   stage: build
#   script:
#     - git clone "https://${GITLAB_USER_NAME}:$CabinMoodsKey@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
#     - cd "${CI_PROJECT_NAME}/"
#     - git checkout ${CI_COMMIT_BRANCH}
#     - git pull origin ${CI_COMMIT_BRANCH}
#     - apt-get update && apt-get install -y plantuml
#     - cd Software_UpSkilling_Workspace
#     - plantuml -tsvg PlantMUL_Architecture_Sequencing/*.puml
#     - git config --global user.email "${GITLAB_USER_EMAIL}"
#     - git config user.name "${GITLAB_USER_NAME}"
#     - git add PlantMUL_Architecture_Sequencing/*
#     - git commit -m "Auto generated sequence diagram PNGs"
#     - git push origin ${CI_COMMIT_BRANCH}
#   
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == "main"'
#       when: manual
#
#   artifacts:
#     paths:
#       - Software_UpSkilling_Workspace/PlantMUL_Architecture_Sequencing
#
# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"
#
# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."
#
# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."